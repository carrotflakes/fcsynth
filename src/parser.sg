
start = {
  _
  assignments: sepEndBy<{
    identifier: expIdentifier
    _ "=" _
    expression: operator1
    type:=assignment
  }, ",">
  _
  body: operator1
  type:=synth
}

operator1 = operator<operator1, operator2, `("+" | "-"), operator2>
operator2 = operator<operator2, operator3, `("*" | "/"), operator3>
operator3 = {
  func: `"-"
  _
  arguments: @operator3
  type:=call
} | operator4
operator4 = operator<operator5, operator4, `"<-", operator5>
operator5 = factor

operator<left, right, op, next> = {
  left: left
  _
  func: op
  _
  right: right
  type:=call
} -> {$.arguments = [$.left, $.right]; return $;} | next

factor = (
  "(" _
  operator1
  _ ")"
) | {
  func: expIdentifier
  _ "(" _
  arguments: sepBy<operator1, ",">
  _ ")"
  type:=call
|
  identifier: expIdentifier
  type:=identifier
|
  value: float
  type:=value
}
| (
  "(" _ operator1 _ ")"
)

expIdentifier = `([a-z] *[a-z0-9])


signedInteger = `([+-]([1-9] *[0-9] | "0")) -> { return parseInt($); }
unsignedInteger = `([1-9] *[0-9] | "0") -> { return parseInt($); }
float = `(?[+-] ([1-9] *[0-9] | '0') ?("." ,16*[0-9])) -> { return parseFloat($); }

_ = *(whitespace | comment)

whitespace = +[ \t\r\n]

comment = "//" *[^\n] ("\n" | !.) | "/*" *([^*] | '*' [^/]) "*/"

many<x> = @?(x *(_ x))
many1<x> = @(x *(_ x))
sepBy<x, sep> = @?(x *(_ sep _ x))
sepEndBy<x, sep> = @?(x *(_ sep _ x) ?(_ sep))
sepBy1<x, sep> = @(x *(_ sep _ x))
sepEndBy1<x, sep> = @(x *(_ sep _ x) ?(_ sep))
